* EFA Paper   

** Story Paper
   - Ethernet has high latencies, however latencies are very important for many applications including OLTP.
   - There is specialized hardware like IB which achieves very low latencies. In fact, the latency of RDMA is 500x lower than the one for Eth.
   - Although azure has one instance type with RDMA it is unfortunately often only available on-premise 
   - Recently, Amazon reacted to the need for low latency networks and made EFA widely available in their cloud.
   - X instance types support EFA by now.
   - there is not yet a paper who compares RDMA and EFA 
** Background
   - reliable/ unreliable
   - Primitives
   - order?

** How to write an application?
** Experiment methodology
   - 30 seconds
   - create csv
     experiment_name,ep_description,type(receiver or sender),batchsize,threads,op(send/rec),msg_size,operation_sec,recv_bw,sent_bw,timestamp
   - compile O3
   - script everything 
    
** Experiments 
**** need most of them until beginning of Feb.
   Questions:
     - Where to compare against RDMA?
     - counters? 
           1. Primitives / Connection Type (Reliable) vs RDMA 
              a. Single-threaded
              for all primitives 
              - BW and msg size 
              - latency and msg size
              - one sided cpu consumption on target server
                - use perf stat and bind to process id of the receiver -> receiver must sleep

                  other ideas
                  - overloaded the receiver ?
                    https://github.com/ofiwg/libfabric/blob/main/prov/efa/docs/pkt-processing.md
                  - inject - why do they say it is an optimized version, can we measure that?  
              b. Multi-threaded
              - how many operations can EFA sustain before we are message bound with smaller messages
                - increase threads and see when it is bound with small messages / EFA counters?
                - and increase outstanding messages and keep cores fix  
                - Latency vs target bw curve - fix message size

           2. Optimizations?
              - huge pages ?
                #+BEGIN_SRC:
                echo 110000 | sudo tee /sys/devices/system/node/node0/hugepages/hugepages-2048kB/nr_hugepages
                void* p = mmap(NULL, size, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS | MAP_HUGETLB, -1, 0);
                if (p == MAP_FAILED)
                throw std::runtime_error("mallocHugePages failed");
                memory = static_cast<T*>(p);
                highWaterMark = (size / sizeof(T));
                #+END_SRC

      - Batch Sizes ?
      - Selective Completion vs RDMA ? 
      - DDIO ?
      - env. flags ?
      - zero copy ?
        
   3. KV Application RDMA vs EFA
      - Performance scalability 
      - Latency with target rate 
      - Throughput of function of server threads
      - Effect of GB on server - RDMA ?
      - key/value size
        
** Guidlines
   - one sided CPU consumption ?
   - ordering of reliable -> implications
   - small messages -> EFA not so good compared to RDMA
   - peak number messages

  
** Resources
   good comparison TPC, IB, EFA 
   https://www.youtube.com/watch?v=PDuq1-ERIfM
   https://github.com/ofiwg/ofi-guide/blob/master/OFIGuide.md
   https://github.com/ofiwg/libfabric/blob/main/prov/efa/docs/overview.md
