<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="566" onload="init(evt)" viewBox="0 0 1200 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="566.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="549" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="549" > </text>
<g id="frames">
<g >
<title>rxr_ep_get_peer (1 samples, 0.64%)</title><rect x="320.1" y="165" width="7.6" height="15.0" fill="rgb(240,112,32)" rx="2" ry="2" />
<text  x="323.13" y="175.5" ></text>
</g>
<g >
<title>rxr_pkt_proc_matched_eager_rtm (8 samples, 5.13%)</title><rect x="539.5" y="213" width="60.5" height="15.0" fill="rgb(246,85,9)" rx="2" ry="2" />
<text  x="542.49" y="223.5" >rxr_pk..</text>
</g>
<g >
<title>rxr_pkt_handle_rtm_rta_recv (18 samples, 11.54%)</title><rect x="244.5" y="181" width="136.1" height="15.0" fill="rgb(227,107,41)" rx="2" ry="2" />
<text  x="247.49" y="191.5" >rxr_pkt_handle_rt..</text>
</g>
<g >
<title>rxr_cq_write_rx_completion (1 samples, 0.64%)</title><rect x="373.1" y="69" width="7.5" height="15.0" fill="rgb(237,26,43)" rx="2" ry="2" />
<text  x="376.08" y="79.5" ></text>
</g>
<g >
<title>rxr_ep_progress (64 samples, 41.03%)</title><rect x="55.4" y="261" width="484.1" height="15.0" fill="rgb(224,142,28)" rx="2" ry="2" />
<text  x="58.38" y="271.5" >rxr_ep_progress</text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;void (78 samples, 50.00%)</title><rect x="10.0" y="421" width="590.0" height="15.0" fill="rgb(225,198,20)" rx="2" ry="2" />
<text  x="13.00" y="431.5" >std::thread::_Invoker&lt;std::tuple&lt;void</text>
</g>
<g >
<title>rxr_msg_recv (8 samples, 5.13%)</title><rect x="539.5" y="293" width="60.5" height="15.0" fill="rgb(250,158,23)" rx="2" ry="2" />
<text  x="542.49" y="303.5" >rxr_ms..</text>
</g>
<g >
<title>ofi_cq_progress (66 samples, 42.31%)</title><rect x="40.3" y="277" width="499.2" height="15.0" fill="rgb(237,97,2)" rx="2" ry="2" />
<text  x="43.26" y="287.5" >ofi_cq_progress</text>
</g>
<g >
<title>fi_recv (8 samples, 5.13%)</title><rect x="539.5" y="309" width="60.5" height="15.0" fill="rgb(205,24,30)" rx="2" ry="2" />
<text  x="542.49" y="319.5" >fi_recv</text>
</g>
<g >
<title>ofi_cq_readfrom (21 samples, 13.46%)</title><rect x="380.6" y="197" width="158.9" height="15.0" fill="rgb(249,114,5)" rx="2" ry="2" />
<text  x="383.64" y="207.5" >ofi_cq_readfrom</text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (6 samples, 3.85%)</title><rect x="327.7" y="69" width="45.4" height="15.0" fill="rgb(212,120,35)" rx="2" ry="2" />
<text  x="330.69" y="79.5" >__me..</text>
</g>
<g >
<title>rxr_msg_generic_recv (8 samples, 5.13%)</title><rect x="539.5" y="261" width="60.5" height="15.0" fill="rgb(230,27,33)" rx="2" ry="2" />
<text  x="542.49" y="271.5" >rxr_ms..</text>
</g>
<g >
<title>pthread_spin_lock (1 samples, 0.64%)</title><rect x="373.1" y="37" width="7.5" height="15.0" fill="rgb(228,132,41)" rx="2" ry="2" />
<text  x="376.08" y="47.5" ></text>
</g>
<g >
<title>ft_spin_for_comp (69 samples, 44.23%)</title><rect x="17.6" y="325" width="521.9" height="15.0" fill="rgb(243,134,54)" rx="2" ry="2" />
<text  x="20.56" y="335.5" >ft_spin_for_comp</text>
</g>
<g >
<title>pthread_spin_lock@plt (1 samples, 0.64%)</title><rect x="214.2" y="181" width="7.6" height="15.0" fill="rgb(209,63,53)" rx="2" ry="2" />
<text  x="217.23" y="191.5" ></text>
</g>
<g >
<title>BenchmarkNode::startNode (78 samples, 50.00%)</title><rect x="600.0" y="469" width="590.0" height="15.0" fill="rgb(219,28,33)" rx="2" ry="2" />
<text  x="603.00" y="479.5" >BenchmarkNode::startNode</text>
</g>
<g >
<title>efa_sub_cq_get_cqe (1 samples, 0.64%)</title><rect x="153.7" y="133" width="7.6" height="15.0" fill="rgb(211,151,1)" rx="2" ry="2" />
<text  x="156.72" y="143.5" ></text>
</g>
<g >
<title>ofi_fastlock_release (1 samples, 0.64%)</title><rect x="456.3" y="181" width="7.5" height="15.0" fill="rgb(210,74,3)" rx="2" ry="2" />
<text  x="459.28" y="191.5" ></text>
</g>
<g >
<title>pthread_spin_lock (2 samples, 1.28%)</title><rect x="380.6" y="165" width="15.2" height="15.0" fill="rgb(227,83,18)" rx="2" ry="2" />
<text  x="383.64" y="175.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void (78 samples, 50.00%)</title><rect x="10.0" y="453" width="590.0" height="15.0" fill="rgb(218,14,30)" rx="2" ry="2" />
<text  x="13.00" y="463.5" >std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void</text>
</g>
<g >
<title>std::__invoke_impl&lt;void, (78 samples, 50.00%)</title><rect x="10.0" y="389" width="590.0" height="15.0" fill="rgb(212,72,49)" rx="2" ry="2" />
<text  x="13.00" y="399.5" >std::__invoke_impl&lt;void,</text>
</g>
<g >
<title>rxr_pkt_entry_clone (10 samples, 6.41%)</title><rect x="244.5" y="149" width="75.6" height="15.0" fill="rgb(220,124,46)" rx="2" ry="2" />
<text  x="247.49" y="159.5" >rxr_pkt_..</text>
</g>
<g >
<title>rxr_cq_handle_rx_completion (1 samples, 0.64%)</title><rect x="373.1" y="85" width="7.5" height="15.0" fill="rgb(221,217,38)" rx="2" ry="2" />
<text  x="376.08" y="95.5" ></text>
</g>
<g >
<title>std::thread::join (78 samples, 50.00%)</title><rect x="600.0" y="437" width="590.0" height="15.0" fill="rgb(252,109,21)" rx="2" ry="2" />
<text  x="603.00" y="447.5" >std::thread::join</text>
</g>
<g >
<title>pthread_spin_lock (4 samples, 2.56%)</title><rect x="569.7" y="117" width="30.3" height="15.0" fill="rgb(218,95,25)" rx="2" ry="2" />
<text  x="572.74" y="127.5" >pt..</text>
</g>
<g >
<title>rxr_msg_alloc_unexp_rx_entry_for_msgrtm (6 samples, 3.85%)</title><rect x="327.7" y="117" width="45.4" height="15.0" fill="rgb(246,96,43)" rx="2" ry="2" />
<text  x="330.69" y="127.5" >rxr_..</text>
</g>
<g >
<title>rxr_pkt_copy_to_rx (1 samples, 0.64%)</title><rect x="373.1" y="117" width="7.5" height="15.0" fill="rgb(241,223,28)" rx="2" ry="2" />
<text  x="376.08" y="127.5" ></text>
</g>
<g >
<title>rxr_pkt_copy_to_rx (8 samples, 5.13%)</title><rect x="539.5" y="197" width="60.5" height="15.0" fill="rgb(213,35,44)" rx="2" ry="2" />
<text  x="542.49" y="207.5" >rxr_pk..</text>
</g>
<g >
<title>start_thread (78 samples, 50.00%)</title><rect x="10.0" y="485" width="590.0" height="15.0" fill="rgb(213,65,27)" rx="2" ry="2" />
<text  x="13.00" y="495.5" >start_thread</text>
</g>
<g >
<title>rxr_pkt_proc_rtm_rta (7 samples, 4.49%)</title><rect x="327.7" y="165" width="52.9" height="15.0" fill="rgb(232,173,16)" rx="2" ry="2" />
<text  x="330.69" y="175.5" >rxr_p..</text>
</g>
<g >
<title>__gthread_join (78 samples, 50.00%)</title><rect x="600.0" y="421" width="590.0" height="15.0" fill="rgb(229,194,51)" rx="2" ry="2" />
<text  x="603.00" y="431.5" >__gthread_join</text>
</g>
<g >
<title>std::execute_native_thread_routine (78 samples, 50.00%)</title><rect x="10.0" y="469" width="590.0" height="15.0" fill="rgb(219,225,19)" rx="2" ry="2" />
<text  x="13.00" y="479.5" >std::execute_native_thread_routine</text>
</g>
<g >
<title>cq_next_sub_cqe_get (1 samples, 0.64%)</title><rect x="153.7" y="149" width="7.6" height="15.0" fill="rgb(224,69,38)" rx="2" ry="2" />
<text  x="156.72" y="159.5" ></text>
</g>
<g >
<title>rdm_ep_poll_shm_cq (21 samples, 13.46%)</title><rect x="380.6" y="229" width="158.9" height="15.0" fill="rgb(237,109,21)" rx="2" ry="2" />
<text  x="383.64" y="239.5" >rdm_ep_poll_shm_cq</text>
</g>
<g >
<title>ft_get_cq_comp (69 samples, 44.23%)</title><rect x="17.6" y="341" width="521.9" height="15.0" fill="rgb(250,99,45)" rx="2" ry="2" />
<text  x="20.56" y="351.5" >ft_get_cq_comp</text>
</g>
<g >
<title>efa_process_cqe (2 samples, 1.28%)</title><rect x="161.3" y="149" width="15.1" height="15.0" fill="rgb(206,193,53)" rx="2" ry="2" />
<text  x="164.28" y="159.5" ></text>
</g>
<g >
<title>ft_post_rx (8 samples, 5.13%)</title><rect x="539.5" y="341" width="60.5" height="15.0" fill="rgb(208,50,18)" rx="2" ry="2" />
<text  x="542.49" y="351.5" >ft_pos..</text>
</g>
<g >
<title>rxr_cq_handle_rx_completion (5 samples, 3.21%)</title><rect x="562.2" y="165" width="37.8" height="15.0" fill="rgb(208,24,29)" rx="2" ry="2" />
<text  x="565.18" y="175.5" >rxr..</text>
</g>
<g >
<title>ibv_poll_cq (16 samples, 10.26%)</title><rect x="100.8" y="213" width="121.0" height="15.0" fill="rgb(245,86,34)" rx="2" ry="2" />
<text  x="103.77" y="223.5" >ibv_poll_cq</text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (10 samples, 6.41%)</title><rect x="244.5" y="133" width="75.6" height="15.0" fill="rgb(239,55,31)" rx="2" ry="2" />
<text  x="247.49" y="143.5" >__memmov..</text>
</g>
<g >
<title>fi_cq_read (68 samples, 43.59%)</title><rect x="25.1" y="309" width="514.4" height="15.0" fill="rgb(236,225,44)" rx="2" ry="2" />
<text  x="28.13" y="319.5" >fi_cq_read</text>
</g>
<g >
<title>rxr_pkt_entry_clone (6 samples, 3.85%)</title><rect x="327.7" y="85" width="45.4" height="15.0" fill="rgb(209,35,53)" rx="2" ry="2" />
<text  x="330.69" y="95.5" >rxr_..</text>
</g>
<g >
<title>rxr_pkt_proc_msgrtm (7 samples, 4.49%)</title><rect x="327.7" y="149" width="52.9" height="15.0" fill="rgb(207,187,7)" rx="2" ry="2" />
<text  x="330.69" y="159.5" >rxr_p..</text>
</g>
<g >
<title>efa_poll_sub_cqs (8 samples, 5.13%)</title><rect x="115.9" y="181" width="60.5" height="15.0" fill="rgb(248,210,46)" rx="2" ry="2" />
<text  x="118.90" y="191.5" >efa_po..</text>
</g>
<g >
<title>rxr_pkt_get_msgrtm_rx_entry (6 samples, 3.85%)</title><rect x="327.7" y="133" width="45.4" height="15.0" fill="rgb(222,106,18)" rx="2" ry="2" />
<text  x="330.69" y="143.5" >rxr_..</text>
</g>
<g >
<title>pthread_spin_lock (5 samples, 3.21%)</title><rect x="176.4" y="181" width="37.8" height="15.0" fill="rgb(221,106,29)" rx="2" ry="2" />
<text  x="179.41" y="191.5" >pth..</text>
</g>
<g >
<title>rxr_cq_reorder_msg (10 samples, 6.41%)</title><rect x="244.5" y="165" width="75.6" height="15.0" fill="rgb(241,76,19)" rx="2" ry="2" />
<text  x="247.49" y="175.5" >rxr_cq_r..</text>
</g>
<g >
<title>SendRecvClient::_batchWorker (78 samples, 50.00%)</title><rect x="10.0" y="373" width="590.0" height="15.0" fill="rgb(205,4,28)" rx="2" ry="2" />
<text  x="13.00" y="383.5" >SendRecvClient::_batchWorker</text>
</g>
<g >
<title>smr_ep_progress (8 samples, 5.13%)</title><rect x="395.8" y="165" width="60.5" height="15.0" fill="rgb(228,204,53)" rx="2" ry="2" />
<text  x="398.77" y="175.5" >smr_ep..</text>
</g>
<g >
<title>main (78 samples, 50.00%)</title><rect x="600.0" y="501" width="590.0" height="15.0" fill="rgb(240,159,20)" rx="2" ry="2" />
<text  x="603.00" y="511.5" >main</text>
</g>
<g >
<title>memcpy (3 samples, 1.92%)</title><rect x="539.5" y="165" width="22.7" height="15.0" fill="rgb(210,27,33)" rx="2" ry="2" />
<text  x="542.49" y="175.5" >m..</text>
</g>
<g >
<title>ft_post_rx_buf (8 samples, 5.13%)</title><rect x="539.5" y="325" width="60.5" height="15.0" fill="rgb(237,215,52)" rx="2" ry="2" />
<text  x="542.49" y="335.5" >ft_pos..</text>
</g>
<g >
<title>ofi_bufpool_get_ibuf (1 samples, 0.64%)</title><rect x="320.1" y="149" width="7.6" height="15.0" fill="rgb(238,188,47)" rx="2" ry="2" />
<text  x="323.13" y="159.5" ></text>
</g>
<g >
<title>ofi_copy_to_iov (3 samples, 1.92%)</title><rect x="539.5" y="181" width="22.7" height="15.0" fill="rgb(243,141,27)" rx="2" ry="2" />
<text  x="542.49" y="191.5" >o..</text>
</g>
<g >
<title>rxr_msg_handle_unexp_match (8 samples, 5.13%)</title><rect x="539.5" y="229" width="60.5" height="15.0" fill="rgb(211,3,21)" rx="2" ry="2" />
<text  x="542.49" y="239.5" >rxr_ms..</text>
</g>
<g >
<title>SendRecvClient::batch (78 samples, 50.00%)</title><rect x="600.0" y="453" width="590.0" height="15.0" fill="rgb(217,87,4)" rx="2" ry="2" />
<text  x="603.00" y="463.5" >SendRecvClient::batch</text>
</g>
<g >
<title>rdm_ep_poll_ibv_cq (37 samples, 23.72%)</title><rect x="100.8" y="229" width="279.8" height="15.0" fill="rgb(217,187,21)" rx="2" ry="2" />
<text  x="103.77" y="239.5" >rdm_ep_poll_ibv_cq</text>
</g>
<g >
<title>rxr_pkt_proc_matched_eager_rtm (1 samples, 0.64%)</title><rect x="373.1" y="133" width="7.5" height="15.0" fill="rgb(250,7,14)" rx="2" ry="2" />
<text  x="376.08" y="143.5" ></text>
</g>
<g >
<title>fi_cq_readfrom (21 samples, 13.46%)</title><rect x="380.6" y="213" width="158.9" height="15.0" fill="rgb(206,94,2)" rx="2" ry="2" />
<text  x="383.64" y="223.5" >fi_cq_readfrom</text>
</g>
<g >
<title>BenchmarkNode::run (78 samples, 50.00%)</title><rect x="600.0" y="485" width="590.0" height="15.0" fill="rgb(219,107,27)" rx="2" ry="2" />
<text  x="603.00" y="495.5" >BenchmarkNode::run</text>
</g>
<g >
<title>ofi_cq_progress (10 samples, 6.41%)</title><rect x="380.6" y="181" width="75.7" height="15.0" fill="rgb(221,111,18)" rx="2" ry="2" />
<text  x="383.64" y="191.5" >ofi_cq_p..</text>
</g>
<g >
<title>rxr_ep_progress_internal (61 samples, 39.10%)</title><rect x="78.1" y="245" width="461.4" height="15.0" fill="rgb(228,155,27)" rx="2" ry="2" />
<text  x="81.08" y="255.5" >rxr_ep_progress_internal</text>
</g>
<g >
<title>pthread_spin_lock (9 samples, 5.77%)</title><rect x="463.8" y="181" width="68.1" height="15.0" fill="rgb(233,194,27)" rx="2" ry="2" />
<text  x="466.85" y="191.5" >pthread..</text>
</g>
<g >
<title>rxr_pkt_handle_data_copied (1 samples, 0.64%)</title><rect x="373.1" y="101" width="7.5" height="15.0" fill="rgb(227,225,17)" rx="2" ry="2" />
<text  x="376.08" y="111.5" ></text>
</g>
<g >
<title>all (156 samples, 100%)</title><rect x="10.0" y="517" width="1180.0" height="15.0" fill="rgb(242,112,16)" rx="2" ry="2" />
<text  x="13.00" y="527.5" ></text>
</g>
<g >
<title>pthread_spin_unlock@plt (1 samples, 0.64%)</title><rect x="531.9" y="181" width="7.6" height="15.0" fill="rgb(237,62,3)" rx="2" ry="2" />
<text  x="534.92" y="191.5" ></text>
</g>
<g >
<title>rxr_rm_rx_cq_check (4 samples, 2.56%)</title><rect x="569.7" y="133" width="30.3" height="15.0" fill="rgb(236,183,14)" rx="2" ry="2" />
<text  x="572.74" y="143.5" >rx..</text>
</g>
<g >
<title>rxr_cq_write_rx_completion (5 samples, 3.21%)</title><rect x="562.2" y="149" width="37.8" height="15.0" fill="rgb(238,161,17)" rx="2" ry="2" />
<text  x="565.18" y="159.5" >rxr..</text>
</g>
<g >
<title>rxr_pkt_handle_recv_completion (21 samples, 13.46%)</title><rect x="221.8" y="213" width="158.8" height="15.0" fill="rgb(205,218,30)" rx="2" ry="2" />
<text  x="224.79" y="223.5" >rxr_pkt_handle_recv_..</text>
</g>
<g >
<title>rxr_pkt_get_unexp (6 samples, 3.85%)</title><rect x="327.7" y="101" width="45.4" height="15.0" fill="rgb(220,76,7)" rx="2" ry="2" />
<text  x="330.69" y="111.5" >rxr_..</text>
</g>
<g >
<title>libefa::Node::rx (77 samples, 49.36%)</title><rect x="17.6" y="357" width="582.4" height="15.0" fill="rgb(212,61,20)" rx="2" ry="2" />
<text  x="20.56" y="367.5" >libefa::Node::rx</text>
</g>
<g >
<title>clone (78 samples, 50.00%)</title><rect x="10.0" y="501" width="590.0" height="15.0" fill="rgb(211,213,6)" rx="2" ry="2" />
<text  x="13.00" y="511.5" >clone</text>
</g>
<g >
<title>efa_poll_cq (16 samples, 10.26%)</title><rect x="100.8" y="197" width="121.0" height="15.0" fill="rgb(241,153,44)" rx="2" ry="2" />
<text  x="103.77" y="207.5" >efa_poll_cq</text>
</g>
<g >
<title>efa_poll_sub_cq (4 samples, 2.56%)</title><rect x="146.2" y="165" width="30.2" height="15.0" fill="rgb(245,222,2)" rx="2" ry="2" />
<text  x="149.15" y="175.5" >ef..</text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;void (78 samples, 50.00%)</title><rect x="10.0" y="437" width="590.0" height="15.0" fill="rgb(225,172,33)" rx="2" ry="2" />
<text  x="13.00" y="447.5" >std::thread::_Invoker&lt;std::tuple&lt;void</text>
</g>
<g >
<title>__pthread_join (78 samples, 50.00%)</title><rect x="600.0" y="405" width="590.0" height="15.0" fill="rgb(236,51,39)" rx="2" ry="2" />
<text  x="603.00" y="415.5" >__pthread_join</text>
</g>
<g >
<title>rxr_msg_recvmsg (8 samples, 5.13%)</title><rect x="539.5" y="277" width="60.5" height="15.0" fill="rgb(218,169,42)" rx="2" ry="2" />
<text  x="542.49" y="287.5" >rxr_ms..</text>
</g>
<g >
<title>ofi_cq_readfrom (68 samples, 43.59%)</title><rect x="25.1" y="293" width="514.4" height="15.0" fill="rgb(247,64,53)" rx="2" ry="2" />
<text  x="28.13" y="303.5" >ofi_cq_readfrom</text>
</g>
<g >
<title>rxr_pkt_proc_received (18 samples, 11.54%)</title><rect x="244.5" y="197" width="136.1" height="15.0" fill="rgb(235,124,41)" rx="2" ry="2" />
<text  x="247.49" y="207.5" >rxr_pkt_proc_rece..</text>
</g>
<g >
<title>std::__invoke&lt;void (78 samples, 50.00%)</title><rect x="10.0" y="405" width="590.0" height="15.0" fill="rgb(213,136,12)" rx="2" ry="2" />
<text  x="13.00" y="415.5" >std::__invoke&lt;void</text>
</g>
<g >
<title>rxr_pkt_handle_data_copied (5 samples, 3.21%)</title><rect x="562.2" y="181" width="37.8" height="15.0" fill="rgb(220,74,36)" rx="2" ry="2" />
<text  x="565.18" y="191.5" >rxr..</text>
</g>
<g >
<title>pthread_spin_lock (3 samples, 1.92%)</title><rect x="55.4" y="245" width="22.7" height="15.0" fill="rgb(248,41,18)" rx="2" ry="2" />
<text  x="58.38" y="255.5" >p..</text>
</g>
<g >
<title>rxr_msg_proc_unexp_msg_list (8 samples, 5.13%)</title><rect x="539.5" y="245" width="60.5" height="15.0" fill="rgb(233,118,54)" rx="2" ry="2" />
<text  x="542.49" y="255.5" >rxr_ms..</text>
</g>
<g >
<title>rxr_rm_rx_cq_check (1 samples, 0.64%)</title><rect x="373.1" y="53" width="7.5" height="15.0" fill="rgb(229,84,54)" rx="2" ry="2" />
<text  x="376.08" y="63.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (3 samples, 1.92%)</title><rect x="539.5" y="149" width="22.7" height="15.0" fill="rgb(238,125,52)" rx="2" ry="2" />
<text  x="542.49" y="159.5" >_..</text>
</g>
</g>
</svg>
