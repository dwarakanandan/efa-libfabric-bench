<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="582" onload="init(evt)" viewBox="0 0 1200 582" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="582.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="565" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="565" > </text>
<g id="frames">
<g >
<title>rxr_pkt_proc_msgrtm (5 samples, 2.13%)</title><rect x="502.1" y="149" width="25.1" height="15.0" fill="rgb(231,185,37)" rx="2" ry="2" />
<text  x="505.09" y="159.5" >r..</text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;void (117 samples, 49.79%)</title><rect x="10.0" y="437" width="587.5" height="15.0" fill="rgb(224,150,46)" rx="2" ry="2" />
<text  x="13.00" y="447.5" >std::thread::_Invoker&lt;std::tuple&lt;void</text>
</g>
<g >
<title>rxr_ep_progress_post_prov_buf (3 samples, 1.28%)</title><rect x="552.3" y="245" width="15.1" height="15.0" fill="rgb(238,58,12)" rx="2" ry="2" />
<text  x="555.30" y="255.5" ></text>
</g>
<g >
<title>__pthread_join (117 samples, 49.79%)</title><rect x="602.5" y="421" width="587.5" height="15.0" fill="rgb(246,7,51)" rx="2" ry="2" />
<text  x="605.51" y="431.5" >__pthread_join</text>
</g>
<g >
<title>ofi_fastlock_release_noop (1 samples, 0.43%)</title><rect x="572.4" y="293" width="5.0" height="15.0" fill="rgb(243,61,42)" rx="2" ry="2" />
<text  x="575.38" y="303.5" ></text>
</g>
<g >
<title>rxr_pkt_entry_clone (1 samples, 0.43%)</title><rect x="527.2" y="165" width="5.0" height="15.0" fill="rgb(226,27,14)" rx="2" ry="2" />
<text  x="530.19" y="175.5" ></text>
</g>
<g >
<title>rxr_ep_get_peer (1 samples, 0.43%)</title><rect x="517.1" y="85" width="5.1" height="15.0" fill="rgb(248,21,29)" rx="2" ry="2" />
<text  x="520.15" y="95.5" ></text>
</g>
<g >
<title>dlist_insert_before (1 samples, 0.43%)</title><rect x="507.1" y="85" width="5.0" height="15.0" fill="rgb(218,160,34)" rx="2" ry="2" />
<text  x="510.11" y="95.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.43%)</title><rect x="527.2" y="149" width="5.0" height="15.0" fill="rgb(212,57,8)" rx="2" ry="2" />
<text  x="530.19" y="159.5" ></text>
</g>
<g >
<title>rxr_ep_get_peer (1 samples, 0.43%)</title><rect x="532.2" y="181" width="5.0" height="15.0" fill="rgb(243,66,13)" rx="2" ry="2" />
<text  x="535.21" y="191.5" ></text>
</g>
<g >
<title>rxr_pkt_req_base_hdr_size (1 samples, 0.43%)</title><rect x="522.2" y="37" width="5.0" height="15.0" fill="rgb(217,218,6)" rx="2" ry="2" />
<text  x="525.17" y="47.5" ></text>
</g>
<g >
<title>rxr_msg_proc_unexp_msg_list (2 samples, 0.85%)</title><rect x="587.4" y="261" width="10.1" height="15.0" fill="rgb(212,184,33)" rx="2" ry="2" />
<text  x="590.45" y="271.5" ></text>
</g>
<g >
<title>libefa::Node::rx (1 samples, 0.43%)</title><rect x="597.5" y="517" width="5.0" height="15.0" fill="rgb(222,71,13)" rx="2" ry="2" />
<text  x="600.49" y="527.5" ></text>
</g>
<g >
<title>rxr_cq_handle_rx_completion (1 samples, 0.43%)</title><rect x="592.5" y="181" width="5.0" height="15.0" fill="rgb(209,56,42)" rx="2" ry="2" />
<text  x="595.47" y="191.5" ></text>
</g>
<g >
<title>ft_get_cq_comp (113 samples, 48.09%)</title><rect x="10.0" y="357" width="567.4" height="15.0" fill="rgb(213,83,3)" rx="2" ry="2" />
<text  x="13.00" y="367.5" >ft_get_cq_comp</text>
</g>
<g >
<title>pthread_spin_lock (7 samples, 2.98%)</title><rect x="100.4" y="261" width="35.1" height="15.0" fill="rgb(228,17,14)" rx="2" ry="2" />
<text  x="103.38" y="271.5" >pt..</text>
</g>
<g >
<title>rxr_pkt_copy_to_rx (1 samples, 0.43%)</title><rect x="592.5" y="213" width="5.0" height="15.0" fill="rgb(222,198,35)" rx="2" ry="2" />
<text  x="595.47" y="223.5" ></text>
</g>
<g >
<title>rxr_pkt_get_msgrtm_rx_entry (5 samples, 2.13%)</title><rect x="502.1" y="133" width="25.1" height="15.0" fill="rgb(219,47,4)" rx="2" ry="2" />
<text  x="505.09" y="143.5" >r..</text>
</g>
<g >
<title>rxr_msg_alloc_unexp_rx_entry_for_msgrtm (5 samples, 2.13%)</title><rect x="502.1" y="117" width="25.1" height="15.0" fill="rgb(246,15,36)" rx="2" ry="2" />
<text  x="505.09" y="127.5" >r..</text>
</g>
<g >
<title>efa_poll_cq (64 samples, 27.23%)</title><rect x="175.7" y="213" width="321.4" height="15.0" fill="rgb(211,117,14)" rx="2" ry="2" />
<text  x="178.70" y="223.5" >efa_poll_cq</text>
</g>
<g >
<title>ofi_fastlock_acquire_noop (1 samples, 0.43%)</title><rect x="567.4" y="293" width="5.0" height="15.0" fill="rgb(237,82,48)" rx="2" ry="2" />
<text  x="570.36" y="303.5" ></text>
</g>
<g >
<title>__gthread_join (117 samples, 49.79%)</title><rect x="602.5" y="437" width="587.5" height="15.0" fill="rgb(217,205,48)" rx="2" ry="2" />
<text  x="605.51" y="447.5" >__gthread_join</text>
</g>
<g >
<title>SendRecvClient::batch (117 samples, 49.79%)</title><rect x="602.5" y="469" width="587.5" height="15.0" fill="rgb(250,5,25)" rx="2" ry="2" />
<text  x="605.51" y="479.5" >SendRecvClient::batch</text>
</g>
<g >
<title>rxr_ep_bulk_post_prov_buf (2 samples, 0.85%)</title><rect x="557.3" y="229" width="10.1" height="15.0" fill="rgb(211,177,27)" rx="2" ry="2" />
<text  x="560.32" y="239.5" ></text>
</g>
<g >
<title>rxr_ep_alloc_rx_entry (4 samples, 1.70%)</title><rect x="502.1" y="101" width="20.1" height="15.0" fill="rgb(238,105,14)" rx="2" ry="2" />
<text  x="505.09" y="111.5" ></text>
</g>
<g >
<title>pthread_spin_lock (13 samples, 5.53%)</title><rect x="421.7" y="197" width="65.3" height="15.0" fill="rgb(214,14,26)" rx="2" ry="2" />
<text  x="424.74" y="207.5" >pthread..</text>
</g>
<g >
<title>rxr_pkt_handle_rtm_rta_recv (10 samples, 4.26%)</title><rect x="502.1" y="197" width="50.2" height="15.0" fill="rgb(227,176,6)" rx="2" ry="2" />
<text  x="505.09" y="207.5" >rxr_p..</text>
</g>
<g >
<title>efa_poll_sub_cqs (40 samples, 17.02%)</title><rect x="220.9" y="197" width="200.8" height="15.0" fill="rgb(210,64,20)" rx="2" ry="2" />
<text  x="223.89" y="207.5" >efa_poll_sub_cqs</text>
</g>
<g >
<title>rxr_pkt_proc_matched_eager_rtm (1 samples, 0.43%)</title><rect x="592.5" y="229" width="5.0" height="15.0" fill="rgb(253,2,4)" rx="2" ry="2" />
<text  x="595.47" y="239.5" ></text>
</g>
<g >
<title>SendRecvClient::_batchWorker (117 samples, 49.79%)</title><rect x="10.0" y="389" width="587.5" height="15.0" fill="rgb(251,33,52)" rx="2" ry="2" />
<text  x="13.00" y="399.5" >SendRecvClient::_batchWorker</text>
</g>
<g >
<title>fi_cq_read (1 samples, 0.43%)</title><rect x="597.5" y="469" width="5.0" height="15.0" fill="rgb(210,191,27)" rx="2" ry="2" />
<text  x="600.49" y="479.5" ></text>
</g>
<g >
<title>ofi_cq_readfrom (110 samples, 46.81%)</title><rect x="25.1" y="309" width="552.3" height="15.0" fill="rgb(223,25,42)" rx="2" ry="2" />
<text  x="28.06" y="319.5" >ofi_cq_readfrom</text>
</g>
<g >
<title>pthread_spin_unlock@plt (1 samples, 0.43%)</title><rect x="492.0" y="197" width="5.1" height="15.0" fill="rgb(246,193,21)" rx="2" ry="2" />
<text  x="495.04" y="207.5" ></text>
</g>
<g >
<title>start_thread (117 samples, 49.79%)</title><rect x="10.0" y="501" width="587.5" height="15.0" fill="rgb(253,210,22)" rx="2" ry="2" />
<text  x="13.00" y="511.5" >start_thread</text>
</g>
<g >
<title>dlist_insert_after (1 samples, 0.43%)</title><rect x="507.1" y="69" width="5.0" height="15.0" fill="rgb(226,114,19)" rx="2" ry="2" />
<text  x="510.11" y="79.5" ></text>
</g>
<g >
<title>rxr_pkt_get_msgrtm_rx_entry (2 samples, 0.85%)</title><rect x="537.2" y="149" width="10.1" height="15.0" fill="rgb(208,11,20)" rx="2" ry="2" />
<text  x="540.23" y="159.5" ></text>
</g>
<g >
<title>pthread_spin_unlock (1 samples, 0.43%)</title><rect x="487.0" y="197" width="5.0" height="15.0" fill="rgb(214,64,3)" rx="2" ry="2" />
<text  x="490.02" y="207.5" ></text>
</g>
<g >
<title>rxr_pkt_proc_rtm_rta (3 samples, 1.28%)</title><rect x="537.2" y="181" width="15.1" height="15.0" fill="rgb(210,76,3)" rx="2" ry="2" />
<text  x="540.23" y="191.5" ></text>
</g>
<g >
<title>rxr_ep_progress (95 samples, 40.43%)</title><rect x="90.3" y="277" width="477.1" height="15.0" fill="rgb(246,110,6)" rx="2" ry="2" />
<text  x="93.34" y="287.5" >rxr_ep_progress</text>
</g>
<g >
<title>std::__invoke_impl&lt;void, (117 samples, 49.79%)</title><rect x="10.0" y="405" width="587.5" height="15.0" fill="rgb(254,73,50)" rx="2" ry="2" />
<text  x="13.00" y="415.5" >std::__invoke_impl&lt;void,</text>
</g>
<g >
<title>rxr_pkt_rtm_total_len (1 samples, 0.43%)</title><rect x="522.2" y="85" width="5.0" height="15.0" fill="rgb(214,27,44)" rx="2" ry="2" />
<text  x="525.17" y="95.5" ></text>
</g>
<g >
<title>ofi_bufpool_get_ibuf (1 samples, 0.43%)</title><rect x="532.2" y="165" width="5.0" height="15.0" fill="rgb(249,164,31)" rx="2" ry="2" />
<text  x="535.21" y="175.5" ></text>
</g>
<g >
<title>std::execute_native_thread_routine (117 samples, 49.79%)</title><rect x="10.0" y="485" width="587.5" height="15.0" fill="rgb(224,19,30)" rx="2" ry="2" />
<text  x="13.00" y="495.5" >std::execute_native_thread_routine</text>
</g>
<g >
<title>fi_recv (4 samples, 1.70%)</title><rect x="577.4" y="325" width="20.1" height="15.0" fill="rgb(213,8,54)" rx="2" ry="2" />
<text  x="580.40" y="335.5" ></text>
</g>
<g >
<title>rxr_pkt_proc_matched_eager_rtm (1 samples, 0.43%)</title><rect x="547.3" y="149" width="5.0" height="15.0" fill="rgb(227,122,42)" rx="2" ry="2" />
<text  x="550.28" y="159.5" ></text>
</g>
<g >
<title>rxr_pkt_handle_recv_completion (11 samples, 4.68%)</title><rect x="497.1" y="229" width="55.2" height="15.0" fill="rgb(216,160,26)" rx="2" ry="2" />
<text  x="500.06" y="239.5" >rxr_p..</text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;void (117 samples, 49.79%)</title><rect x="10.0" y="453" width="587.5" height="15.0" fill="rgb(241,80,43)" rx="2" ry="2" />
<text  x="13.00" y="463.5" >std::thread::_Invoker&lt;std::tuple&lt;void</text>
</g>
<g >
<title>rxr_msg_generic_recv (4 samples, 1.70%)</title><rect x="577.4" y="277" width="20.1" height="15.0" fill="rgb(244,184,6)" rx="2" ry="2" />
<text  x="580.40" y="287.5" ></text>
</g>
<g >
<title>rxr_pkt_entry_clone (2 samples, 0.85%)</title><rect x="537.2" y="101" width="10.1" height="15.0" fill="rgb(241,181,13)" rx="2" ry="2" />
<text  x="540.23" y="111.5" ></text>
</g>
<g >
<title>rxr_msg_recv (4 samples, 1.70%)</title><rect x="577.4" y="309" width="20.1" height="15.0" fill="rgb(227,82,20)" rx="2" ry="2" />
<text  x="580.40" y="319.5" ></text>
</g>
<g >
<title>rxr_msg_handle_unexp_match (2 samples, 0.85%)</title><rect x="587.4" y="245" width="10.1" height="15.0" fill="rgb(216,144,6)" rx="2" ry="2" />
<text  x="590.45" y="255.5" ></text>
</g>
<g >
<title>ofi_copy_to_iov (1 samples, 0.43%)</title><rect x="547.3" y="117" width="5.0" height="15.0" fill="rgb(211,64,38)" rx="2" ry="2" />
<text  x="550.28" y="127.5" ></text>
</g>
<g >
<title>libefa::Node::rx (117 samples, 49.79%)</title><rect x="10.0" y="373" width="587.5" height="15.0" fill="rgb(233,163,41)" rx="2" ry="2" />
<text  x="13.00" y="383.5" >libefa::Node::rx</text>
</g>
<g >
<title>pthread_spin_lock (1 samples, 0.43%)</title><rect x="597.5" y="405" width="5.0" height="15.0" fill="rgb(238,142,41)" rx="2" ry="2" />
<text  x="600.49" y="415.5" ></text>
</g>
<g >
<title>rxr_ep_progress (1 samples, 0.43%)</title><rect x="597.5" y="421" width="5.0" height="15.0" fill="rgb(207,207,17)" rx="2" ry="2" />
<text  x="600.49" y="431.5" ></text>
</g>
<g >
<title>rxr_cq_proc_pending_items_in_recvwin (5 samples, 2.13%)</title><rect x="502.1" y="181" width="25.1" height="15.0" fill="rgb(250,60,16)" rx="2" ry="2" />
<text  x="505.09" y="191.5" >r..</text>
</g>
<g >
<title>ofi_cq_progress (103 samples, 43.83%)</title><rect x="50.2" y="293" width="517.2" height="15.0" fill="rgb(212,6,2)" rx="2" ry="2" />
<text  x="53.17" y="303.5" >ofi_cq_progress</text>
</g>
<g >
<title>std::thread::join (117 samples, 49.79%)</title><rect x="602.5" y="453" width="587.5" height="15.0" fill="rgb(231,217,43)" rx="2" ry="2" />
<text  x="605.51" y="463.5" >std::thread::join</text>
</g>
<g >
<title>rxr_pkt_rtm_update_rx_entry (1 samples, 0.43%)</title><rect x="522.2" y="101" width="5.0" height="15.0" fill="rgb(220,73,53)" rx="2" ry="2" />
<text  x="525.17" y="111.5" ></text>
</g>
<g >
<title>memcpy (1 samples, 0.43%)</title><rect x="547.3" y="101" width="5.0" height="15.0" fill="rgb(245,160,30)" rx="2" ry="2" />
<text  x="550.28" y="111.5" ></text>
</g>
<g >
<title>rxr_pkt_handle_data_copied (1 samples, 0.43%)</title><rect x="592.5" y="197" width="5.0" height="15.0" fill="rgb(227,97,20)" rx="2" ry="2" />
<text  x="595.47" y="207.5" ></text>
</g>
<g >
<title>rxr_rm_rx_cq_check (1 samples, 0.43%)</title><rect x="592.5" y="149" width="5.0" height="15.0" fill="rgb(223,13,31)" rx="2" ry="2" />
<text  x="595.47" y="159.5" ></text>
</g>
<g >
<title>BenchmarkNode::startNode (117 samples, 49.79%)</title><rect x="602.5" y="485" width="587.5" height="15.0" fill="rgb(211,90,22)" rx="2" ry="2" />
<text  x="605.51" y="495.5" >BenchmarkNode::startNode</text>
</g>
<g >
<title>rxr_cq_write_rx_completion (1 samples, 0.43%)</title><rect x="592.5" y="165" width="5.0" height="15.0" fill="rgb(251,165,10)" rx="2" ry="2" />
<text  x="595.47" y="175.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.43%)</title><rect x="547.3" y="85" width="5.0" height="15.0" fill="rgb(246,195,22)" rx="2" ry="2" />
<text  x="550.28" y="95.5" ></text>
</g>
<g >
<title>rxr_pkt_req_hdr_size (1 samples, 0.43%)</title><rect x="522.2" y="53" width="5.0" height="15.0" fill="rgb(207,38,0)" rx="2" ry="2" />
<text  x="525.17" y="63.5" ></text>
</g>
<g >
<title>rxr_msg_alloc_unexp_rx_entry_for_msgrtm (2 samples, 0.85%)</title><rect x="537.2" y="133" width="10.1" height="15.0" fill="rgb(206,203,24)" rx="2" ry="2" />
<text  x="540.23" y="143.5" ></text>
</g>
<g >
<title>pthread_spin_unlock (2 samples, 0.85%)</title><rect x="80.3" y="277" width="10.0" height="15.0" fill="rgb(213,80,40)" rx="2" ry="2" />
<text  x="83.30" y="287.5" ></text>
</g>
<g >
<title>all (235 samples, 100%)</title><rect x="10.0" y="533" width="1180.0" height="15.0" fill="rgb(226,165,20)" rx="2" ry="2" />
<text  x="13.00" y="543.5" ></text>
</g>
<g >
<title>ofi_cq_readfrom (1 samples, 0.43%)</title><rect x="597.5" y="453" width="5.0" height="15.0" fill="rgb(206,133,22)" rx="2" ry="2" />
<text  x="600.49" y="463.5" ></text>
</g>
<g >
<title>std::__invoke&lt;void (117 samples, 49.79%)</title><rect x="10.0" y="421" width="587.5" height="15.0" fill="rgb(228,133,26)" rx="2" ry="2" />
<text  x="13.00" y="431.5" >std::__invoke&lt;void</text>
</g>
<g >
<title>rdm_ep_poll_ibv_cq (75 samples, 31.91%)</title><rect x="175.7" y="245" width="376.6" height="15.0" fill="rgb(223,194,45)" rx="2" ry="2" />
<text  x="178.70" y="255.5" >rdm_ep_poll_ibv_cq</text>
</g>
<g >
<title>pthread_spin_lock (1 samples, 0.43%)</title><rect x="582.4" y="261" width="5.0" height="15.0" fill="rgb(223,85,23)" rx="2" ry="2" />
<text  x="585.43" y="271.5" ></text>
</g>
<g >
<title>ft_get_cq_comp (1 samples, 0.43%)</title><rect x="597.5" y="501" width="5.0" height="15.0" fill="rgb(253,62,50)" rx="2" ry="2" />
<text  x="600.49" y="511.5" ></text>
</g>
<g >
<title>fi_cq_read (113 samples, 48.09%)</title><rect x="10.0" y="325" width="567.4" height="15.0" fill="rgb(218,16,53)" rx="2" ry="2" />
<text  x="13.00" y="335.5" >fi_cq_read</text>
</g>
<g >
<title>clone (117 samples, 49.79%)</title><rect x="10.0" y="517" width="587.5" height="15.0" fill="rgb(220,118,32)" rx="2" ry="2" />
<text  x="13.00" y="527.5" >clone</text>
</g>
<g >
<title>rxr_pkt_proc_msgrtm (3 samples, 1.28%)</title><rect x="537.2" y="165" width="15.1" height="15.0" fill="rgb(223,104,48)" rx="2" ry="2" />
<text  x="540.23" y="175.5" ></text>
</g>
<g >
<title>ft_post_rx (4 samples, 1.70%)</title><rect x="577.4" y="357" width="20.1" height="15.0" fill="rgb(224,82,44)" rx="2" ry="2" />
<text  x="580.40" y="367.5" ></text>
</g>
<g >
<title>rxr_msg_recvmsg (4 samples, 1.70%)</title><rect x="577.4" y="293" width="20.1" height="15.0" fill="rgb(242,19,52)" rx="2" ry="2" />
<text  x="580.40" y="303.5" ></text>
</g>
<g >
<title>ofi_cq_read (1 samples, 0.43%)</title><rect x="20.0" y="309" width="5.1" height="15.0" fill="rgb(225,1,21)" rx="2" ry="2" />
<text  x="23.04" y="319.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (2 samples, 0.85%)</title><rect x="537.2" y="85" width="10.1" height="15.0" fill="rgb(242,21,33)" rx="2" ry="2" />
<text  x="540.23" y="95.5" ></text>
</g>
<g >
<title>rxr_pkt_proc_received (10 samples, 4.26%)</title><rect x="502.1" y="213" width="50.2" height="15.0" fill="rgb(235,118,7)" rx="2" ry="2" />
<text  x="505.09" y="223.5" >rxr_p..</text>
</g>
<g >
<title>rxr_ep_progress_internal (86 samples, 36.60%)</title><rect x="135.5" y="261" width="431.9" height="15.0" fill="rgb(227,8,18)" rx="2" ry="2" />
<text  x="138.53" y="271.5" >rxr_ep_progress_internal</text>
</g>
<g >
<title>ft_spin_for_comp (113 samples, 48.09%)</title><rect x="10.0" y="341" width="567.4" height="15.0" fill="rgb(234,42,20)" rx="2" ry="2" />
<text  x="13.00" y="351.5" >ft_spin_for_comp</text>
</g>
<g >
<title>main (117 samples, 49.79%)</title><rect x="602.5" y="517" width="587.5" height="15.0" fill="rgb(247,189,18)" rx="2" ry="2" />
<text  x="605.51" y="527.5" >main</text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void (117 samples, 49.79%)</title><rect x="10.0" y="469" width="587.5" height="15.0" fill="rgb(232,74,1)" rx="2" ry="2" />
<text  x="13.00" y="479.5" >std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void</text>
</g>
<g >
<title>rxr_pkt_req_data_size (1 samples, 0.43%)</title><rect x="522.2" y="69" width="5.0" height="15.0" fill="rgb(221,221,27)" rx="2" ry="2" />
<text  x="525.17" y="79.5" ></text>
</g>
<g >
<title>ft_post_rx_buf (4 samples, 1.70%)</title><rect x="577.4" y="341" width="20.1" height="15.0" fill="rgb(212,82,54)" rx="2" ry="2" />
<text  x="580.40" y="351.5" ></text>
</g>
<g >
<title>ibv_poll_cq (64 samples, 27.23%)</title><rect x="175.7" y="229" width="321.4" height="15.0" fill="rgb(220,32,24)" rx="2" ry="2" />
<text  x="178.70" y="239.5" >ibv_poll_cq</text>
</g>
<g >
<title>memset (1 samples, 0.43%)</title><rect x="512.1" y="85" width="5.0" height="15.0" fill="rgb(212,185,26)" rx="2" ry="2" />
<text  x="515.13" y="95.5" ></text>
</g>
<g >
<title>rxr_pkt_proc_rtm_rta (5 samples, 2.13%)</title><rect x="502.1" y="165" width="25.1" height="15.0" fill="rgb(230,34,11)" rx="2" ry="2" />
<text  x="505.09" y="175.5" >r..</text>
</g>
<g >
<title>ft_spin_for_comp (1 samples, 0.43%)</title><rect x="597.5" y="485" width="5.0" height="15.0" fill="rgb(251,20,40)" rx="2" ry="2" />
<text  x="600.49" y="495.5" ></text>
</g>
<g >
<title>ofi_cq_progress (1 samples, 0.43%)</title><rect x="597.5" y="437" width="5.0" height="15.0" fill="rgb(243,11,37)" rx="2" ry="2" />
<text  x="600.49" y="447.5" ></text>
</g>
<g >
<title>rxr_pkt_get_unexp (2 samples, 0.85%)</title><rect x="537.2" y="117" width="10.1" height="15.0" fill="rgb(216,218,31)" rx="2" ry="2" />
<text  x="540.23" y="127.5" ></text>
</g>
<g >
<title>rxr_cq_reorder_msg (1 samples, 0.43%)</title><rect x="527.2" y="181" width="5.0" height="15.0" fill="rgb(229,218,1)" rx="2" ry="2" />
<text  x="530.19" y="191.5" ></text>
</g>
<g >
<title>pthread_spin_lock (1 samples, 0.43%)</title><rect x="592.5" y="133" width="5.0" height="15.0" fill="rgb(231,16,18)" rx="2" ry="2" />
<text  x="595.47" y="143.5" ></text>
</g>
<g >
<title>rxr_pkt_copy_to_rx (1 samples, 0.43%)</title><rect x="547.3" y="133" width="5.0" height="15.0" fill="rgb(233,119,5)" rx="2" ry="2" />
<text  x="550.28" y="143.5" ></text>
</g>
<g >
<title>BenchmarkNode::run (117 samples, 49.79%)</title><rect x="602.5" y="501" width="587.5" height="15.0" fill="rgb(205,184,49)" rx="2" ry="2" />
<text  x="605.51" y="511.5" >BenchmarkNode::run</text>
</g>
</g>
</svg>
